"use client";

import { useState } from "react";
import { useRouter } from "next/navigation";

import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'
import { faArrowRight } from '@fortawesome/free-solid-svg-icons'

interface Question {
  clientQuestion: string;
  intrusiveThought: string;
  mainQuestion: string;
  options: { text: string; points: number }[];
}

const questions: Question[] = [
  {
    clientQuestion: "O cliente diz que achou um cabelo no p√£o.",
    intrusiveThought: "Seu pensamento intrusivo diz para perguntar se ele colocou o cabelo l√° para ganhar um p√£o gr√°tis.",
    mainQuestion: "O que voc√™ faz?",
    options: [
      { text: "1. Pede desculpas e promete investigar o caso.", points: 0 },
      { text: "2. Diz: 'Tem certeza que n√£o foi voc√™?'", points: 7 },
      { text: "3. Responde: 'Cabelo √© um brinde especial üòÅüòÅ'", points: 10 }
    ]
  },
  {
    clientQuestion: "O cliente diz que est√° esperando h√° 20 minutos por uma resposta no chat.",
    intrusiveThought: "Seu pensamento intrusivo diz para ignorar e ver se ele desiste.",
    mainQuestion: "O que voc√™ faz?",
    options: [
      { text: "1. Responde: 'Tem gente na fila, calma.'", points: 5 },
      { text: "2. Pede desculpas pelo atraso e o atende imediatamente.", points: 0 },
      { text: "3. Sai para tomar um caf√© e pensa nisso depois.", points: 7 }
    ]
  },
  {
    clientQuestion: "O cliente diz que o p√£o ficou queimado e exige que seja feita uma troca!",
    intrusiveThought: "O seu pensamento intrusivo diz para mandar ele aprender a usar um forno.",
    mainQuestion: "O que voc√™ faz?",
    options: [
      { text: "1. Responde: 'Ent√£o n√£o coma.'", points: 9 },
      { text: "2. Diz: 'Talvez o problema esteja no seu forno.'", points: 6 },
      { text: "3. Pede desculpas e explica a ele sobre a prepara√ß√£o correta do produto.", points: 0 }
    ]
  },
  {
    clientQuestion: "O cliente diz que o pedido chegou errado!",
    intrusiveThought: "O seu pensamento intrusivo diz para perguntar se ele leu o pedido direito.",
    mainQuestion: "Como voc√™ resolve a situa√ß√£o?",
    options: [
      { text: "1. Responde: 'Problema seu üòÖ'", points: 10 },
      { text: "2. Pede desculpas e envia o pedido correto.", points: 0 },
      { text: "3. Diz: 'Confirme se voc√™ pediu certo.'", points: 5 }
    ]
  },
  {
    clientQuestion: "O cliente diz que encontrou um peda√ßo de pl√°stico no p√£o.",
    intrusiveThought: "O seu pensamento intrusivo diz para voc√™ oferecer um brinde como compensa√ß√£o pelo pl√°stico extra.",
    mainQuestion: "O que voc√™ faz?",
    options: [
      { text: "1. Pede desculpas e promete investigar o ocorrido.", points: 0 },
      { text: "2. Diz: 'A embalagem est√° no p√£o, faz parte.'", points: 9 },
      { text: "3. Responde: 'Relaxa, √© cortesia da casa.'", points: 10 },
    ]
  },
  {
    clientQuestion: "O cliente diz que o p√£o n√£o tem o sabor que ele esperava.",
    intrusiveThought: "O seu pensamento intrusivo diz para voc√™ mandar ele pedir um novo p√£o com o sabor certo.",
    mainQuestion: "O que voc√™ faz?",
    options: [
      { text: "1. Pede desculpas e tenta explicar para o cliente como preparar o p√£o da maneira correta.", points: 0 },
      { text: "2. Responde: 'Se voc√™ preparar do jeito certo ele ter√° um sabor melhor!'", points: 9 },
      { text: "3. Diz: 'Ent√£o aprenda a preparar o seu pr√≥prio p√£o.'", points: 8 }
    ]
  },
  {
    clientQuestion: "O cliente diz: 'Por que o p√£o que entregaram √© t√£o pequeno?'",
    intrusiveThought: "O seu pensamento intrusivo diz para perguntar se ele j√° ouviu falar em dieta.",
    mainQuestion: "O que voc√™ responde?",
    options: [
      { text: "1. Responde: 'Talvez voc√™ precise comprar √≥culos.'", points: 9 },
      { text: "2. Pede desculpas e explique que pode ter ocorrido um erro no lote.", points: 0 },
      { text: "3. Diz: 'Pequeno, mas saboroso!'", points: 4 }
    ]
  },
  {
    clientQuestion: "O cliente pergunta se colocaram fermento vencido no p√£o, pois n√£o cresceu nada!",
    intrusiveThought: "O seu pensamento intrusivo diz para sugerir que ele preste aten√ß√£o no que ele est√° comprando.",
    mainQuestion: "Como voc√™ responde?",
    options: [
      { text: "1. Responde: 'Ele cresceu sim, talvez voc√™ que tenha dificuldades de vis√£o.'", points: 10 },
      { text: "2. Diz: 'N√£o era para crescer mesmo, ele √© feito para ser assim.'", points: 6 },
      { text: "3. Explica que o processo de fermenta√ß√£o √© feito na fabrica√ß√£o e que ele n√£o cresce mais depois.", points: 0 },
    ]
  },
  {
    clientQuestion: "O cliente questiona o porqu√™ de n√£o termos atendimento 24 horas.",
    intrusiveThought: "O seu pensamento intrusivo diz para dizer que a vida n√£o gira em torno dele.",
    mainQuestion: "O que voc√™ faz?",
    options: [
      { text: "1. Pede desculpas e informa os hor√°rios de funcionamento.", points: 0 },
      { text: "2. Responde: 'Voc√™ acha que somos rob√¥s?'", points: 8 },
      { text: "3. Fala para usar o FAQ enquanto estamos offline.", points: 3 },
    ]
  },
  {
    clientQuestion: "O cliente reclama que o p√£o de queijo tem pouco queijo.",
    intrusiveThought: "O seu pensamento intrusivo diz: 'Fale que vendemos p√£o de queijo, n√£o queijo de p√£o'",
    mainQuestion: "O que voc√™ faz?",
    options: [
      { text: "1. Responde: '√â s√≥ comprar 1kg de mussarela no mercado e colocar em cima!'", points: 9 },
      { text: "2. Pede desculpas e informa que o nosso p√£o de queijo √© o √∫nico que de fato vai queijo na receita.", points: 0 },
      { text: "3. Pergunta se ele tem certeza que assou o p√£o de queijo da Brico e n√£o um de outra marca.", points: 5 },
    ]
  },
  {
    clientQuestion: "O cliente pergunta porque o p√£o √© t√£o caro se √© s√≥ farinha com √°gua!",
    intrusiveThought: "O seu pensamento intrusivo manda perguntar se ele sabe o pre√ßo do trigo.",
    mainQuestion: "Como voc√™ responde?",
    options: [
      { text: "1. Diz para ele fazer o pr√≥prio p√£o em casa.", points: 9 },
      { text: "2. Explica que o pre√ßo reflete a qualidade e o processo de produ√ß√£o.", points: 0 },
      { text: "3. Responde: '√â s√≥ parar de reclamar e ir comprar em outro lugar.'", points: 10 }
    ]
  },
  {
    clientQuestion: "O cliente diz: 'Minha filha √© al√©rgica e voc√™s n√£o avisaram que tinha gl√∫ten!'",
    intrusiveThought: "O seu pensamento intrusivo diz: 'Pergunte se ele sabe ler r√≥tulos.'",
    mainQuestion: "O que voc√™ faz?",
    options: [
      { text: "1. Diz: 'Est√° no r√≥tulo, voc√™ deveria ter lido.'", points: 8 },
      { text: "2. Responde: 'Se voc√™ soubesse ler isso n√£o teria acontecido.'", points: 10 },
      { text: "3. Pede desculpas e explica onde est√£o as informa√ß√µes no r√≥tulo.", points: 0 }
    ]
  }
];

export default function Quiz() {
  const [name, setName] = useState("");
  const [quizStarted, setQuizStarted] = useState(false);
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
  const [score, setScore] = useState(0);
  const router = useRouter();

  const handleStartQuiz = () => {
    if (name.trim()) {
      setQuizStarted(true);
    } else {
      alert("Por favor, insira seu nome antes de come√ßar o quiz.");
    }
  };

  const handleOptionClick = (points: number) => {
    setScore(score + points);
    if (currentQuestionIndex < questions.length - 1) {
      setCurrentQuestionIndex(currentQuestionIndex + 1);
    } else {
      const personality = calculatePersonality(score + points);
      saveResult(name, personality);
      router.push(
        `/results?name=${encodeURIComponent(name)}&personality=${encodeURIComponent(personality)}`
      );
    }
  };

  const calculatePersonality = (finalScore: number): string => {
    if (finalScore <= 11) return "Zens";
    if (finalScore <= 33) return "Calmos";
    if (finalScore <= 30) return "Ponderados";
    return "Temperamentais";
  };

  const saveResult = (name: string, personality: string) => {
    const existingResults = JSON.parse(localStorage.getItem("quizResults") || "[]");
    const updatedResults = [...existingResults, { name, personality }];
    localStorage.setItem("quizResults", JSON.stringify(updatedResults));
  };

  return (
    <div className="flex flex-col items-center justify-center">
      {!quizStarted ? (
        <div className="p-6 rounded-lg shadow-md">
          <h1 className="text-2xl font-bold mb-4">Bem-vindo ao Quiz!</h1>
          <p className="mb-4">Antes de come√ßar, diga-nos o seu nome:</p>
          <input
            type="text"
            className="border border-gray-300 p-2 rounded w-full mb-4"
            placeholder="Digite seu nome aqui..."
            value={name}
            onChange={(e) => setName(e.target.value)}
          />
          <button
            onClick={handleStartQuiz}
            className="px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600"
          >
            <FontAwesomeIcon icon={faArrowRight} className="fa-fw" />
          </button>
        </div>
      ) : (
        <div className="p-6 rounded-lg shadow-md">
          <h2 className="text-xl font-bold mb-5">
            ({currentQuestionIndex + 1}/{questions.length}) {questions[currentQuestionIndex].clientQuestion}
          </h2>
          <p className="mb-1">{questions[currentQuestionIndex].intrusiveThought}</p>
          <p className="mb-20">{questions[currentQuestionIndex].mainQuestion}</p>
          <div className="flex flex-col gap-3">
            {questions[currentQuestionIndex].options.map((option, index) => (
              <button
                key={index}
                onClick={() => handleOptionClick(option.points)}
                className="px-4 py-2 bg-green-500 text-white rounded-lg hover:bg-green-600"
              >
                {option.text}
              </button>
            ))}
          </div>
        </div>
      )}
    </div>
  );
}
